task:
  # Xcode 12 task
  osx_instance:
    image: big-sur-xcode-12.4
  install_node_script:
    - brew install node
    - cd ./nodejs_server_test_auth_basic_and_ssl
    - npm install
  upgrade_script:
    - sudo gem install cocoapods
    #- flutter channel stable
    #- flutter upgrade
    #- flutter channel beta
    #- flutter upgrade
    #- flutter channel dev
    #- flutter upgrade
    - flutter channel master
    - flutter upgrade
    - git fetch origin master
  matrix:
    - name: test_plugin_ios
      env:
        matrix:
          CHANNEL: "master"
          #CHANNEL: "dev"
          #CHANNEL: "beta"
          #CHANNEL: "stable"
      test_script:
        - xcrun simctl list
        - xcrun simctl create Flutter-iPhone com.apple.CoreSimulator.SimDeviceType.iPhone-12 com.apple.CoreSimulator.SimRuntime.iOS-14-4 | xargs xcrun simctl boot
        - flutter channel $CHANNEL
        - ./scripts/test.sh $(ipconfig getifaddr en0)
      pub_cache:
        folder: ~/.pub-cache

task:
  env:
    API: 30
    GOO: "google_apis"
    ABI: "x86"
  container:
    image: cirrusci/flutter:latest
    cpu: 6
    memory: 12G
    kvm: true
  install_node_script:
    - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash
    - export NVM_DIR="$HOME/.nvm"
    - source "$NVM_DIR/nvm.sh"  # This loads nvm
    - nvm install node
    - nvm use node
    - cd ./nodejs_server_test_auth_basic_and_ssl
    - npm install
  upgrade_script:
    - flutter channel master
    - flutter upgrade
  matrix:
    - name: test_plugin_android
      env:
        matrix:
          CHANNEL: "master"
          #CHANNEL: "dev"
          #CHANNEL: "beta"
          #CHANNEL: "stable"
#      fix_kvm_script:
#        - |
#          if [[ $ABI =~ "x86" ]]; then
#            sudo chown cirrus:cirrus /dev/kvm
#          fi
      install_emulator_script:
        - sdkmanager "system-images;android-$API;$GOO;$ABI" > /dev/null
      create_emulator_script:
        - echo no | avdmanager --verbose create avd --force -n test -k "system-images;android-$API;$GOO;$ABI"
      start_emulator_background_script:
        - EMU_PARAMS="
          -avd test
          -verbose
          -no-window
          -no-audio
          "
        - |
          EMU_COMMAND=emulator
          if [[ $ABI =~ "x86" ]]; then
            EMU_COMMAND="emulator"
          else
            # emulate graphics if running on ARM
            EMU_PARAMS="${EMU_PARAMS} -gpu swiftshader"
          fi
        - ${ANDROID_HOME}/emulator/${EMU_COMMAND} ${EMU_PARAMS}
      wait_for_emulator_script:
        - ./scripts/android-wait-for-emulator.sh
      doctor_script: flutter doctor -v
      test_script:
        - export PATH="$PATH":"$HOME/.pub-cache/bin"
        - export NVM_DIR="$HOME/.nvm"
        - source "$NVM_DIR/nvm.sh"  # This loads nvm
        - nvm use node
        - ./scripts/test.sh $(ifconfig en0 | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}')
      pub_cache:
        folder: ~/.pub-cache
